/// Copyright 2021 Javier Molina, Gabriel Zúñiga and Andrés Azofeifa.
/// Universidad de Costa Rica

#ifndef GOLDBACHCALCULATOR_H
#define GOLDBACHCALCULATOR_H

#include <inttypes.h>
#include <vector>
#include <sstream>
#include <iostream>
#include <mutex>
#include "Consumer.hpp"
#include "Semaphore.hpp"

/**
 * @brief struct containing a sum that forms the number
 */
typedef struct {
  int64_t num1;
  int64_t num2;
  int64_t num3;
} sum;

typedef struct goldbachSums {
  int64_t numberGoldbach;  // the number to calculte goldbach sums
  int64_t sumsCounter;  // the number of sums generated by the numberGoldbach
  int sign;  // 0 if the number is positive 1 if not
  bool isValid;  // 0 the number is valid, 1 is -5=> && <=5, -1 is out of range
  std::vector<sum> sums;  // stores all the goldbach summands of the goldbach-
                        //  sums generated for the numberGoldbach
  size_t originVectorPosition;
  //  Memory address of the response array to store the result
  goldbachSums* responseArray;
  //  Counter of the quantity of numbers for request that are already done
  size_t* doneNumbers;
  size_t numbersQuantity;  //  the quantity of numbers for request
  int stopCondition;  //  stop condition for the queue
  //  Semaphore to know when the goldbachWebApp can send the list of sums
  Semaphore* canContinue;
  friend bool operator ==
  (const goldbachSums &goldbach01, const goldbachSums &goldbach02) {
    return (goldbach01.stopCondition == goldbach02.stopCondition);
  }
} goldbachSums;

/**
 * @brief This class does all the Goldbach sums calculations 
 * 
 */
class GoldbachCalculator : public Consumer <goldbachSums> {
 public:
  ///  Constructor
  explicit GoldbachCalculator(size_t thread_id);
  ///  Destructor
  ~GoldbachCalculator();
  void consume(const goldbachSums& data) override;
  int run() override;
  int checkPrime(int64_t number);
  goldbachSums strongConjecture(goldbachSums goldbachData);
  goldbachSums weakConjecture(goldbachSums goldbachData);
 private:
  //  The thread id
  size_t golbachThread_id;
  //  mutex to prevent data race
  std::mutex mutex;
};

#endif  // GOLDBACHCALCULATOR_H
